#version 430
layout(local_size_x = 256) in;

struct Vertex {
    vec3 pos;
    vec3 normal;
    vec3 color;
};

layout(std430, binding = 0) buffer Vertices {
    Vertex vertices[];
};

uniform float radius;
uniform int latCount;
uniform int lonCount;

float hash(vec2 p) { return fract(sin(dot(p, vec2(12.9898,78.233))) * 43758.5453); }

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= latCount * lonCount) return;

    uint lat = idx / lonCount;
    uint lon = idx % lonCount;

    float u = float(lon) / float(lonCount);
    float v = float(lat) / float(latCount);

    float theta = u * 2.0 * 3.14159265;
    float phi = v * 3.14159265;

    vec3 pos = vec3(
        radius * sin(phi) * cos(theta),
        radius * cos(phi),
        radius * sin(phi) * sin(theta)
    );

    // Optionnel : bruit simple
    float n = hash(vec2(u, v));
    pos += 0.01 * n * normalize(pos);

    vertices[idx].pos = pos;
    vertices[idx].normal = normalize(pos);
    vertices[idx].color = vec3(0.2, 0.6, 1.0);
}
